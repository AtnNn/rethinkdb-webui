{
  "data": {
    "women": {
      "db_test": {
        "table_test": [
          {"id": 1, "name": "Superwoman"},
          {"id": 2, "name": "Spiderwoman"},
          {"id": 3, "name": "Ironwoman"}
        ]
      }
    },
    "marvel": {
      "test": {
        "marvel": [
          {"id": 1, "name": "Superman", "abilities": {"super-strength": true}},
          {"id": 2, "name": "Spiderman", "abilities": {"thread": true}},
          {"id": 3, "name": "Ironman", "abilities": {"toys": true}}
        ]
      }
    }
  },
  "types": {
    "r": {
      "parent": null
    },
    "query": {
      "parent": null
    },
    "sequence": {
      "parent": "query",
      "children": [
        "selection",
        "json"
      ]
    },
    "selection": {
      "parent": "sequence",
      "children": [
        "table"
      ]
    },
    "table": {
      "parent": "selection"
    },
    "db": {
      "parent": null
    },
    "json": {
      "parent": "sequence",
      "children": [
        "bool",
        "number"
      ]
    },
    "bool": {
      "parent": "json"
    },
    "number": {
      "parent": "json"
    }
  },
  "sections": [
    {
      "tag": "module",
      "name": "Accessing RQL",
      "description": "All RQL queries begin from the top level module.",
      "commands": [
        {
          "tag" : "r",
          "description": "The toplevel RQL namespace.",
          "parent": null,
          "returns": "r",
          "langs": {
            "js": {
              "name": "r",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Setup your top level namespace:",
                  "code": "var r = require('rethinkdb');"
                }
              ]
            },
            "rb": {
              "name": "r",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Setup your top level namespace:",
                  "code": "require 'rethinkdb'\ninclude RethinkDB::Shortcuts"
                }
              ]
            },
            "py": {
              "name": "r",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Setup your top level namespace:",
                  "code": "import rethinkdb as r"
                }
              ]
            }
          }
        },
        {
          "tag": "connect",
          "description": "Create a new connection to the database server.<br /><br />If the connection cannot be established, a <code>RqlDriverError</code> exception will be thrown.",
          "parent": "r",
          "returns": "connection",
          "langs": {
            "js": {
              "name": "connect",
              "body": "opts, callback",
              "examples" : [
                {
                  "description": "Opens a new connection to the database:",
                  "code": "r.connect({host:'localhost', port:28015, db: 'marvel'},\n          function(err, conn) { ... })"
                }
              ]
            },
            "py": {
              "name": "connect",
              "body": "host='localhost', port=28015, db='test'",
              "examples" : [
                {
                  "description": "Opens a connection using the default host and port but specifying the default database:",
                  "code": "conn = r.connect(db='heroes')"
                }
              ]
            },
            "rb": {
              "name": "connect",
              "body": "host='localhost', port=28015, default_db='test'",
              "examples" : [
                {
                  "description": "Opens a connection to localhost:28015 with 'heroes' as the default database:",
                  "code": "conn = r.connect('localhost', 28015, 'heroes')"
                }
              ]
            }
          }
        },
        {
          "tag": "repl",
          "description": "Set the default connection to make REPL use easier. Allows calling <code>run()</code> without specifying a connection.",
          "parent": "connection",
          "returns": null,
          "langs": {
            "js": {},
            "py": {
              "name": "repl",
              "body": "",
              "examples" : [
                {
                  "description": "Set the default connection in REPL, and call `run()` without specifying the connection:",
                  "code": "r.connect().repl()\nr.table('users').run()"
                }
              ]
            },
            "rb": {
              "name": "repl",
              "body": "",
              "examples" : [
                {
                  "description": "Set the default connection in REPL, and call `run()` without specifying the connection:",
                  "code": "r.connect().repl\nr.table('users').run"
                }
              ]
            }
          }
        },
        {
          "tag": "close",
          "description": "Close an open connection. Closing a connection cancels all outstanding requests and frees the memory associated with the open requests.",
          "parent": "connection",
          "returns": null,
          "langs": {
            "js": {
              "name": "close",
              "body": "",
              "examples" : [
                {
                  "description": "Close an open connection:",
                  "code": "conn.close()"
                }
              ]
            },
            "py": {
              "name": "close",
              "body": "",
              "examples" : [
                {
                  "description": "Close an open connection:",
                  "code": "conn.close()"
                }
              ]
            },
            "rb": {
              "name": "close",
              "body": "",
              "examples" : [
                {
                  "description": "Close an open connection:",
                  "code": "conn.close"
                }
              ]
            }
          }
        },
        {
          "tag": "reconnect",
          "description": "Close and attempt to reopen a connection. Has the effect of canceling any outstanding request while keeping the connection open.",
          "parent": "connection",
          "returns": null,
          "langs": {
            "js": {
              "name": "reconnect",
              "body": "callback",
              "examples" : [
                {
                  "description": "Cancel outstanding requests/queries that are no longer needed:",
                  "code": "conn.reconnect(function(err, conn) { ... })"
                }
              ]
            },
            "py": {
              "name": "reconnect",
              "body": "",
              "examples" : [
                {
                  "description": "Cancel outstanding requests/queries that are no longer needed:",
                  "code": "conn.reconnect()"
                }
              ]
            },
            "rb": {
              "name": "reconnect",
              "body": "",
              "examples" : [
                {
                  "description": "Cancel outstanding requests/queries that are no longer needed:",
                  "code": "conn.reconnect"
                }
              ]
            }
          }
        },
        {
          "tag": "use",
          "description": "Change the default database on this connection.",
          "parent": "connection",
          "returns": null,
          "langs": {
            "js": {
              "name": "use",
              "body": "dbName",
              "examples" : [
                {
                  "description": "Change the default database so that we don't need to specify the database when referencing a table:",
                  "code": "conn.use('heroes')"
                }
              ]
            },
            "py": {
              "name": "use",
              "body": "dbName",
              "examples" : [
                {
                  "description": "Change the default database so that we don't need to specify the database when referencing a table:",
                  "code": "conn.use('heroes')"
                }
              ]
            },
            "rb": {
              "name": "use",
              "body": "dbName",
              "examples" : [
                {
                  "description": "Change the default database so that we don't need to specify the database when referencing a table:",
                  "code": "conn.use('heroes')"
                }
              ]
            }
          }
        },
        {
          "tag": "run",
          "description": "Run a query on a connection.",
          "parent": "query",
          "returns": "cursor",
          "langs": {
            "js": {
              "name": "run",
              "body": "conn[, callback]",
              "examples" : [
                {
                  "description": "Call run on the connection with a query to execute the query. The callback will get a cursor from which results may be retrieved:",
                  "code": "r.table('marvel').run(conn, function (err, cursor) { ... });"
                }, {
                  "description": "If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag allowing out of date data in an options object:",
                  "code": "r.table('marvel').run({connection: conn, useOutdated: true},\n                      function (err, cursor) { ... });"
                }
              ]
            },
            "py": {
              "name": "run",
              "body": "conn[, use_outdated=False]",
              "examples" : [
                {
                  "description": "Use the cursor to lazily iterate over the results. 'cursor' is an iterable object:",
                  "code": "for doc in r.table('marvel').run(conn):\n    print doc"
                },
                {
                  "description": "If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag allowing out of date data. Settings for individual tables will supercede this global setting for all tables in the query.",
                  "code": "r.table('marvel').run(use_outdated=True)"
                }
              ]
            },
            "rb": {
              "name": "run",
              "body": "conn[, opts]",
              "examples" : [
                {
                  "description": "Use the cursor (enumerable) to iterate over the results and print them:",
                  "code": "r.table('marvel').run(conn).each{|x| p x}"
                },
                {
                  "description": "If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag in an options object allowing out of date data. Settings for individual tables will supercede this global setting for all tables in the query.",
                  "code": "r.table('marvel').run({:use_outdated => true})"
                }
              ]
            }
          }
        },
        {
          "tag": "next",
          "description": "Get the next element in the cursor.",
          "parent": "cursor",
          "returns": null,
          "langs": {
            "js": {
              "name": "next",
              "body": "callback",
              "examples" : [
                {
                  "description": "Let's grab the next element!",
                  "code": "cur.next(function(err, row) {\n return processRow(row);\n});"
                }
              ]
            },
            "py": {},
            "rb": {}
          }
        },
        {
          "tag": "hasNext",
          "description": "Check if there are more elements in the cursor.",
          "parent": "cursor",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "hasNext",
              "body": "",
              "examples" : [
                {
                  "description": "Are there more elements in the cursor?",
                  "code": "var hasMore = cur.hasNext();"
                }
              ]
            },
            "py": {},
            "rb": {}
          }
        },
        {
          "tag": "each",
          "description": "Lazily iterate over the result set one element at a time.",
          "parent": "cursor",
          "returns": null,
          "langs": {
            "js": {
              "name": "each",
              "body": "callback",
              "examples" : [
                {
                  "description": "Let's process all the elements!",
                  "code": "cur.each(function(err, row) {\n return processRow(row);\n});"
                }
              ]
            },
            "py": {},
            "rb": {}
          }
        },
        {
          "tag": "toArray",
          "description": "Retrieve all results and pass them as an array to the given callback.",
          "parent": "cursor",
          "returns": null,
          "langs": {
            "js": {
              "name": "toArray",
              "body": "callback",
              "examples" : [
                {
                  "description": "For small result sets it may be more convenient to process them at once as an array.",
                  "code": "cur.toArray(function(err, results) {\n for(var i in results) {\n  processRow(results[i]);\n }\n});"
                }
              ]
            },
            "py": {},
            "rb": {}
          }
        }
      ]
    },
    {
      "tag" : "db_admin",
      "name": "Manipulating databases",
      "description": "These commands allow database manipulation.",
      "commands": [
        {
          "tag" : "db_create",
          "description": "Create a database. A RethinkDB database is a collection of tables, similar to relational databases.<br /><br />If successful, the operation returns an object: <code>{created: 1}</code>. If a database with the same name already exists the operation throws <code>RqlRuntimeError</code>.",
          "parent": "r",
          "returns": "json",
          "langs": {
            "js": {
              "name": "dbCreate",
              "body": "dbName",
              "examples": [
                {
                  "description": "Create a database named 'superheroes':",
                  "code": "r.dbCreate('superheroes').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "db_create",
              "body": "db_name",
              "examples": [
                {
                  "description": "Create a database named 'superheroes':",
                  "code": "r.db_create('superheroes').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "db_create",
              "body": "db_name",
              "examples": [
                {
                  "description": "Create a database named 'superheroes':",
                  "code": "r.db_create('superheroes').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "db_drop",
          "description": "Drop a database. The database, all its tables, and corresponding data will be deleted.<br /><br />If successful, the operation returns an object: <code>{dropped: 1}</code>. If the specified database doesn't exist a <code>RqlRuntimeError</code> is thrown.",
          "parent": "r",
          "returns": "object",
          "langs": {
            "js": {
              "name": "dbDrop",
              "body": "dbName",
              "examples": [
                {
                  "description": "Drop a database named 'superheroes':",
                  "code": "r.dbDrop('superheroes').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "db_drop",
              "body": "db_name",
              "examples": [
                {
                  "description": "Drop a database named 'superheroes':",
                  "code": "r.db_drop('superheroes').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "db_drop",
              "body": "db_name",
              "examples": [
                {
                  "description": "Drop a database named 'superheroes':",
                  "code": "r.db_drop('superheroes').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "db_list",
          "description": "List all database names in the system.",
          "parent": "r",
          "returns": "array",
          "langs": {
            "js": {
              "name": "dbList",
              "body": "",
              "examples": [
                {
                  "description": "List all databases:",
                  "code": "r.dbList().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "db_list",
              "body": "",
              "examples": [
                {
                  "description": "List all databases:",
                  "code": "r.db_list().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "db_list",
              "dont_need_parenthesis": true,
              "body": "",
              "examples": [
                {
                  "description": "List all databases:",
                  "code": "r.db_list.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "table_admin",
      "name": "Manipulating tables",
      "description": "These commands allow table manipulation.",
      "commands": [
        {
          "tag": "table_create",
          "description": "Create a table. A RethinkDB table is a collection of JSON documents.<br /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If a table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.",
          "parent": "db",
          "returns": "json",
          "langs": {
            "js": {
              "name": "tableCreate",
              "body": "tableName[, options]",
              "examples": [
                {
                  "description": "Create a table named 'dc-universe' with the primary key set to field 'id'. If a new document doesn't contain the field 'id', the database will autogenerate a value for it.",
                  "code": "r.db('test').tableCreate('dc-universe').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Create a table named 'dc-universe' using the field 'name' as primary key:",
                  "code": "r.db('test').tableCreate('dc-universe', {primaryKey: 'name'})\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "table_create",
              "body": "table_name[, primary_key=None, primary_datacenter=None, cache_size=None]",
              "examples": [
                {
                  "description": "Create a table named 'dc-universe' with the primary key set to field 'id'. If a new document doesn't contain the field 'id', the database will autogenerate a value for it.",
                  "code": "r.db('test').table_create('dc-universe').run(conn)"
                },
                {
                  "description": "Create a table named 'dc-universe' using the field 'name' as primary key:",
                  "code": "r.db('test').table_create('dc-universe', primary_key='name').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "table_create",
              "body": "table_name[, options]",
              "examples": [
                {
                  "description": "Create a table named 'dc-universe' with the primary key set to field 'id'. If a new document doesn't contain the field 'id', the database will autogenerate a value for it.",
                  "code": "r.db('test').table_create('dc-universe').run(conn)"
                },
                {
                  "description": "Create a table named 'dc-universe' using the field 'name' as primary key:",
                  "code": "r.db('test').table_create('dc-universe', :primary_key => 'name').run(conn)"
                }                
              ]
            }
          }
        },
        {
          "tag": "table_drop",
          "description": "Drop a table. The table and all its data will be deleted.<br /><br />If succesful, the operation returns an object: <code>{dropped: 1}</code>. If the specified table doesn't exist a <code>RqlRuntimeError</code> is thrown.",
          "parent": "db",
          "returns": "json",
          "langs": {
            "js": {
              "name": "tableDrop",
              "body": "tableName",
              "examples": [
                {
                  "description": "Drop a table named 'dc-universe':",
                  "code": "r.db('test').tableDrop('dc-universe').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "table_drop",
              "body": "table_name",
              "examples": [
                {
                  "description": "Drop a table named 'dc-universe':",
                  "code": "r.db('test').table_drop('dc-universe').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "table_drop",
              "body": "table_name",
              "examples": [
                {
                  "description": "Drop a table named 'dc-universe':",
                  "code": "r.db('test').table_drop('dc-universe').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "table_list",
          "description": "List all table names in a database.",
          "parent": "db",
          "returns": "array",
          "langs": {
            "js": {
              "name": "tableList",
              "body": "",
              "examples": [
                {
                  "description": "List all tables of the 'test' database:",
                  "code": "r.db('test').tableList().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "table_list",
              "body": "",
              "examples": [
                {
                  "description": "List all tables of the 'test' database:",
                  "code": "r.db('test').table_list().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "table_list",
              "body": "",
              "examples": [
                {
                  "description": "List all tables of the 'test' database:",
                  "code": "r.db('test').table_list().run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "writing_data",
      "name": "Writing data",
      "description": "These commands allow inserting, deleting, and updating data.",
      "commands": [
        {
          "tag": "insert",
          "description": "Insert JSON documents into a table. Accepts a single JSON document or an array of documents. <br /><br />Insert returns an object that contains one or more of:<ul><li><code>inserted</code> - the number of documents that were succesfully inserted;</li><li><code>replaced</code> - the number of documents that were updated when <code>upsert</code> is used;</li><li><code>errors</code> - the number of errors encountered while inserting;</li><li><code>first_error</code> - the text of the first error encountered;</li><li>it can also contain a field <code>generated_keys</code> providing a list of generated primary key values.</li></ul>",
          "parent": "table",
          "returns": "query",
          "langs": {
            "js": {
              "name": "insert",
              "body": "json | [json][, {upsert: true}]",
              "examples": [
                {
                  "description": "Insert a row into a table named 'marvel':",
                  "code": "r.table('marvel').insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, 
                {
                  "description": "Insert multiple rows into a table named 'marvel':",
                  "code": "r.table('marvel').insert([\n    { superhero: 'Wolverine', superpower: 'Adamantium' },\n    { superhero: 'Spiderman', superpower: 'spidy sense' }\n]).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, 
                {
                  "description": "Insert a row into a table named 'marvel'. Overwriting if the document already exists:",
                  "code": "r.table('marvel').insert(\n    { superhero: 'Iron Man', superpower: 'Arc Reactor' },\n    {upsert: true}\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "insert",
              "body": "json | [json][, upsert=False]",
              "examples": [
                {
                  "description": "Insert a row into a table named 'marvel':",
                  "code": "r.table('marvel').insert({ 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' })\n .run(conn)"
                }, 
                {
                  "description": "Insert multiple rows into a table named 'marvel':",
                  "code": "r.table('marvel').insert([\n    { 'superhero': 'Wolverine', 'superpower': 'Adamantium' },\n    { 'superhero': 'Spiderman', 'superpower': 'spidy sense' }\n]).run(conn)"
                }, 
                {
                  "description": "Insert a row into a table named 'marvel', overwriting if the document already exists:",
                  "code": "r.table('marvel').insert(\n    { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n    upsert=true\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "insert",
              "body": "json | [json][, :upsert]",
              "examples": [
                {
                  "description": "Insert a row into a table named 'marvel':",
                  "code": "r.table('marvel').insert({:superhero => 'Iron Man', :superpower => 'Arc Reactor'})\n .run(conn)"
                }, 
                {
                  "description": "Insert multiple rows into a table named 'marvel':",
                  "code": "r.table('marvel').insert([\n    {:superhero => 'Wolverine', :superpower => 'Adamantium'},\n    {:superhero => 'Spiderman', :superpower => 'spidy sense'}\n]).run(conn)"
                }, 
                {
                  "description": "Insert a row into a table named 'marvel'. Overwriting if the document already exists:",
                  "code": "r.table('marvel').insert(\n    {:superhero => 'Iron Man', :superpower => 'Arc Reactor' },\n    :upsert\n).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "update",
          "description": "Update JSON documents in a table. Accepts a JSON document, a RQL expression, or a combination of the two.<br /><br />Update returns an object that contains one or more of:<ul><li><code>replaced</code> - the number of documents that were updated;</li><li><code>errors</code> - the number of errors encountered while performing the update;</li><li><code>first_error</code> - the text of the first error encountered.</li></ul>",
          "parent": "selection",
          "returns": "query",
          "langs": {
            "js": {
              "name": "update",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Update Superman's age to 30. If attribute 'age' doesn't exist, adds it to the document:",
                  "code": "r.table('marvel').get('superman').update({ age: 30 }).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "Increment every superhero's age. If age doesn't exist, throws an error:",
                  "code": "r.table('marvel').update({ age: r.row('age').add(1) }).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').update({ age: r.row('age').add(r.js('1')) },\n    {'nonAtomic':true}\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "update",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Update Superman's age to 30. If attribute 'age' doesn't exist, adds it to the document:",
                  "code": "r.table('marvel').get('superman').update({ 'age': 30 }).run(conn)"
                }, {
                  "description": "Increment every superhero's age. If age doesn't exist, throws an error:",
                  "code": "r.table('marvel').update(lambda x: {'age': x['age'] + 1}).run(conn)"
                }, {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').update(lambda x: {'age': x['age'] + r.js('1')}, non_atomic=True)\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "update",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Update Superman's age to 30. If attribute 'age' doesn't exist, adds it to the document:",
                  "code": "r.table('marvel').get('superman').update{ {:age => 30} }.run(conn)"
                }, {
                  "description": "Increment every superhero's age. If age doesn't exist, throws an error:",
                  "code": "r.table('marvel').update{|hero| {:age => hero[:age] + 1}}.run(conn)"
                }, {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').update(:non_atomic) {|hero| {:age => hero[:age] + r.js('1')}}\n .run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "replace",
          "description": "Replace documents in a table. Accepts a JSON document or a RQL expression, and replaces the original document with the new one. The new document must have the same primary key as the original document.<br /><br />Replace returns an object that contains one or more of:<ul><li><code>replaced</code> - the number of documents that were replaced;</li><li><code>errors</code> - the number of errors encountered while performing the replace;</li><li><code>first_error</code> - the text of the first error encountered.</li></ul>",
          "parent": "selection",
          "returns": "query",
          "langs": {
            "js": {
              "name": "replace",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Remove all existing attributes from Superman's document, and add an attribute 'age':",
                  "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: 30 }).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: r.js('30') },\n    { 'nonAtomic': true }\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "replace",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Remove all existing attributes from Superman's document, and add an attribute 'age':",
                  "code": "r.table('marvel').get('superman').replace({ 'id': 'superman', 'age': 30 }).run(conn)"
                },
                {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').get('superman')\n .replace({ 'id': 'superman', 'age': 30 }, non_atomic=True).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "replace",
              "body": "json | expr",
              "examples": [
                {
                  "description": "Remove all existing attributes from Superman's document, and add an attribute 'age':",
                  "code": "r.table('marvel').get('superman').replace{ {:id => 'superman', :age => 30} }.run(conn)"
                },
                {
                  "description": "Allow the server to run non-atomic operations:",
                  "code": "r.table('marvel').get('superman').replace(:non_atomic, {:id => 'superman', :age => 30}).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "delete",
          "description": "Delete one or more documents from a table.<br /><br />Delete returns an object that contains one or more of:<ul><li><code>deleted</code> - the number of documents that were deleted;</li><li><code>skipped</code> - the number of documents from the selection that were not deleted.</li></ul>",
          "parent": "selection",
          "returns": "query",
          "langs": {
            "js": {
              "name": "delete",
              "body": "",
              "examples": [
                {
                  "description": "Delete superman from the database:",
                  "code": "r.table('marvel').get('superman').delete().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "Delete every document from the table 'marvel':",
                  "code": "r.table('marvel').delete().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "delete",
              "body": "",
              "examples": [
                {
                  "description": "Delete superman from the database:",
                  "code": "r.table('marvel').get('superman').delete().run(conn)"
                }, {
                  "description": "Delete every document from the table 'marvel':",
                  "code": "r.table('marvel').delete().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "delete",
              "dont_need_parenthesis": true,
              "body": "",
              "examples": [
                {
                  "description": "Delete superman from the database:",
                  "code": "r.table('marvel').get('superman').delete.run(conn)"
                }, {
                  "description": "Delete every document from the table 'marvel':",
                  "code": "r.table('marvel').delete.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "select",
      "name": "Selecting data",
      "description": "These commands allow searching for data in the database.",
      "commands": [
        {
          "tag": "db",
          "description": "Reference a database.",
          "parent": "r",
          "returns": "db",
          "langs": {
            "js": {
              "name": "db",
              "body": "dbName",
              "examples" : [
                {
                  "description": "Before we can query a table we have to select the correct database:",
                  "code": "r.db('heroes').table('marvel').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "db",
              "body": "db_name",
              "examples" : [
                {
                  "description": "Before we can query a table we have to select the correct database:",
                  "code": "r.db('heroes').table('marvel').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "db",
              "body": "db_name",
              "examples" : [
                {
                  "description": "Before we can query a table we have to select the correct database:",
                  "code": "r.db('heroes').table('marvel').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "table",
          "description": "Select all documents in a table. This command can be chained with other commands to do further processing on the data.",
          "parent": "db",
          "returns": "selection",
          "langs": {
            "js": {
              "name": "table",
              "body": "name[, {useOutdated: false}]",
              "examples": [
                {
                  "description": "Return all documents in the table 'marvel' of the default database:",
                  "code": "r.table('marvel').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "Return all documents in the table 'marvel' of the database 'heroes':",
                  "code": "r.db('heroes').table('marvel').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "If you are OK with potentially out of date data from this table and want potentially faster reads, pass a flag allowing out of date data:",
                  "code": "r.db('heroes').table('marvel', {useOutdated: true}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "table",
              "body": "name[, use_outdated=False]",
              "examples": [
                {
                  "description": "Return all documents in the table 'marvel' of the default database:",
                  "code": "r.table('marvel').run(conn)"
                }, {
                  "description": "Return all documents in the table 'marvel' of the database 'heroes':",
                  "code": "r.db('heroes').table('marvel').run(conn)"
                }, {
                  "description": "If you are OK with potentially out of date data from this table and want potentially faster reads, pass a flag allowing out of date data:",
                  "code": "r.db('heroes').table('marvel', True).run(conn)" 
                }
              ]
            },
            "rb": {
              "name": "table",
              "body": "name[, opts]",
              "examples": [
                {
                  "description": "Return all documents in the table 'marvel' of the default database:",
                  "code": "r.table('marvel').run(conn)"
                }, {
                  "description": "Return all documents in the table 'marvel' of the database 'heroes':",
                  "code": "r.db('heroes').table('marvel').run(conn)"
                }, {
                  "description": "If you are OK with potentially out of date data from this table and want potentially faster reads, pass an options object specifying that out of date reads are OK:",
                  "code": "r.db('heroes').table('marvel', {:use_outdated => true}).run(conn)" 
                }
              ]
            }
          }
        },
        {
          "tag": "get",
          "description": "Get a document by primary key.",
          "parent": "table",
          "returns": "json",
          "langs": {
            "js": {
              "name": "get",
              "body": "key",
              "examples": [
                {
                  "description": "Find a document with the primary key 'superman':",
                  "code": "r.table('marvel').get('superman').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "get",
              "body": "key",
              "examples": [
                {
                  "description": "Find a document with the primary key 'superman':",
                  "code": "r.table('marvel').get('superman').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "get",
              "body": "key",
              "examples": [
                {
                  "description": "Find a document with the primary key 'superman':",
                  "code": "r.table('marvel').get('superman').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "between",
          "description": "Get all documents between two primary keys (both keys are inclusive).",
          "parent": "selection",
          "returns": "selection",
          "langs": {
            "js": {
              "name": "between",
              "body": "lower_key, upper_key",
              "examples": [
                {
                  "description": "Find all users with primary keys between 10 and 20, inclusive:",
                  "code": "r.table('marvel').between(10, 20).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "between",
              "body": "lower_key, upper_key",
              "examples": [
                {
                  "description": "Find all users with primary keys between 10 and 20, inclusive:",
                  "code": "r.table('marvel').between(10, 20).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "between",
              "body": "lower_key, upper_key",
              "examples": [
                {
                  "description": "Find all users with primary keys between 10 and 20, inclusive:",
                  "code": "r.table('marvel').between(10, 20).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "filter",
          "description": "Get all the documents for which the given predicate is true.",
          "parent": "selection",
          "returns": "selection",
          "langs": {
            "js": {
              "name": "filter",
              "body": "predicate",
              "examples": [
                {
                  "description": "Get all active users aged 30:",
                  "code": "r.table('users').filter({'active': true, 'age': 30}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5:",
                  "code": "r.table('marvel').filter(r.row('magazines').gt(5)).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },              
                {
                  "description": "Select all documents where the 'abilities' field contains a key called 'super-strength':",
                  "code": "r.table('marvel').filter(function(hero) {\n return hero('abilities').contains('super-strength')\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "filter",
              "body": "predicate",
              "examples": [
                {
                  "description": "Get all active users aged 30:",
                  "code": "r.table('users').filter({'active': True, 'age': 30}).run(conn)"
                },              
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5:",
                  "code": "r.table('users').filter(r.row['magazines'] > 5).run(conn)"
                },              
                {
                  "description": "Select all documents where the 'abilities' field contains a key called 'super-strength':",
                  "code": "r.table('marvel').filter(lambda hero: hero['abilities'].contains('super-strength'))\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "filter",
              "body": "predicate",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Get all active users aged 30:",
                  "code": "r.table('users').filter('active' => true, 'age' => 30).run(conn)"
                },              
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5:",
                  "code": "r.table('users').filter{|user| user[:magazines] > 5}.run(conn)"
                },              
                {
                  "description": "Select all documents where the 'abilities' field contains a key called 'super-strength':",
                  "code": "r.table('marvel').filter {|hero|\n hero[:abilities].contains('super-strength')\n}.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "joins",
      "name": "Joins",
      "description": "These commands allow the combination of multiple sequences into a single sequence",
      "commands": [
        {
          "tag": "inner",
          "description": "Returns the inner product of two sequences (e.g. a table, a filter result) filtered by the predicate. The query compares each row of the left sequence with each row of the right sequence to find all pairs of rows which satisfy the predicate. When the predicate is satisfied, each matched pair of rows of both sequences are combined into a result row.",
          "parent": "sequence",
          "returns": "sequence",
          "langs" : {
            "js": {
              "name": "innerJoin",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose:",
                  "code": "r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {\n return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "inner_join",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose:",
                  "code": "r.table('marvel').inner_join(r.table('dc'),\n    lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "inner_join",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose:",
                  "code": "r.table('marvel').inner_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "outer",
          "description": "Computes a left outer join by retaining each row in the left table even if no match was found in the right table.",
          "parent": "sequence",
          "returns": "sequence",
          "langs" : {
            "js": {
              "name": "outerJoin",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence:",
                  "code": "r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {\n return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "outer_join",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence:",
                  "code": "r.table('marvel').outer_join(r.table('dc'),\n    lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "outer_join",
              "body": "othersequence, predicate",
              "examples": [
                {
                  "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence:",
                  "code": "r.table('marvel').outer_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "eqJoin",
          "description": "An efficient join that looks up elements in the right table by primary key.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "eqJoin",
              "body": "leftAttr, other",
              "examples": [
                {
                  "description": "Let our heroes join forces to battle evil!",
                  "code": "r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc')).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes:",
                  "code": "r.table('marvel').innerJoin(r.table('dc'), function(left, right) {\n return left('main_dc_collaborator').eq(right('hero_name'));\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "eq_join",
              "body": "left_attr, other",
              "examples": [
                {
                  "description": "Let our heroes join forces to battle evil!",
                  "code": "r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).run(conn)"
                }, {
                  "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes:",
                  "code": "r.table('marvel').inner_join(r.table('dc'),\n    lambda left, right: left['main_dc_collaborator'] == right['hero_name'])\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "eq_join",
              "body": "left_attr, other",
              "examples": [
                {
                  "description": "Let our heroes join forces to battle evil!",
                  "code": "r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).run(conn)"
                }, {
                  "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes:",
                  "code": "r.table('marvel').inner_join(r.table('dc')) {|left, right|\n left[:main_dc_collaborator].eq(right[:hero_name])\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "zip",
          "description": "Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "zip",
              "body": "",
              "examples": [
                {
                  "description": "'zips up' the sequence by merging the left and right fields produced by a join:",
                  "code": "joinResult.zip().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "zip",
              "body": "",
              "examples": [
                {
                  "description": "'zips up' the sequence by merging the left and right fields produced by a join:",
                  "code": "join_result.zip().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "zip",
              "dont_need_parenthesis": true,
              "body": "",
              "examples": [
                {
                  "description": "'zips up' the sequence by merging the left and right fields produced by a join:",
                  "code": "joinresult.zip.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "transformations",
      "name": "Transformations",
      "description": "These commands are used to transform data in a sequence",
      "commands": [
        {
          "tag": "map",
          "description": "Transform each element of the sequence by applying the given mapping function.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "map",
              "body": "mappingFunction",
              "examples": [
                {
                  "description": "Construct a sequence of hero power ratings:",
                  "code": "r.table('marvel').map(function(hero) {\n return hero('combatPower').add(hero('compassionPower').mul(2))\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "map",
              "body": "mapping_function",
              "examples": [
                {
                  "description": "Construct a sequence of hero power ratings:",
                  "code": "r.table('marvel')\n .map(lambda hero: hero['combatPower'] + hero['compassionPower'] * 2)\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "map",
              "dont_need_parenthesis": true,
              "body": "mapping_function",
              "examples": [
                {
                  "description": "Construct a sequence of hero power ratings:",
                  "code": "r.table('marvel').map {|hero|\n hero[:combat_power] + hero[:compassion_power] * 2\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "concatMap",
          "description": "Flattens a sequence of arrays returned by the <code>mappingFunction</code> into a single sequence.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "concatMap",
              "body": "mappingFunction",
              "examples": [
                {
                  "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence:",
                  "code": "r.table('marvel').concatMap(function(hero) {\n return hero('defeatedMonsters')\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "concat_map",
              "body": "mapping_function",
              "examples": [
                {
                  "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence:",
                  "code": "r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "concat_map",
              "dont_need_parenthesis": true,
              "body": "mapping_function",
              "examples": [
                {
                  "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field :defeated_monsters is a list that is concatenated to the sequence:",
                  "code": "r.table('marvel').concat_map {|hero|\n hero[:defeated_monsters]\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "orderby",
          "description": "Sort the sequence by document values of the given key(s).<br /><br /><code>order by</code> defaults to ascending ordering. To explicitly specify the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "orderBy",
              "body": "key1, [key2...]",
              "examples" : [
                {
                  "description": "Order our heroes by a series of performance metrics:",
                  "code": "r.table('marvel').orderBy('enemiesVanquished', 'damselsSaved').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }, {
                  "description": "Let's lead with our best vanquishers by specify descending ordering:",
                  "code": "r.table('marvel').orderBy(r.desc('enemiesVanquished'), r.asc('damselsSaved'))\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "order_by",
              "body": "key1, [key2...]",
              "examples" : [
                {
                  "description": "Order our heroes by a series of performance metrics:",
                  "code": "r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)"
                }, {
                  "description": "Let's lead with our best vanquishers by specify descending ordering:",
                  "code": "r.table('marvel')\n .order_by(r.desc('enemies_vanquished'), r.asc('damsels_saved'))\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "order_by",
              "body": "key1, [key2...]",
              "examples" : [
                {
                  "description": "Order our heroes by a series of performance metrics:",
                  "code": "r.table('marvel').order_by(:enemies_vanquished, :damsels_saved).run(conn)"
                }, {
                  "description": "Let's lead with our best vanquishers by specify descending ordering:",
                  "code": "r.table('marvel').order_by(r.desc(:enemies_vanquished), r.asc(:damsels_saved))\n .run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "skip",
          "description": "Skip a number of elements from the head of the sequence.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "skip",
              "body": "n",
              "examples" : [
                {
                  "description": "Here in conjunction with orderBy we choose to ignore the first 10 most successful heroes:",
                  "code": "r.table('marvel').orderBy('successMetric').skip(10).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "skip",
              "body": "n",
              "examples" : [
                {
                  "description": "Here in conjunction with order_by we choose to ignore the first 10 most successful heroes:",
                  "code": "r.table('marvel').order_by('successMetric').skip(10).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "skip",
              "body": "n",
              "examples" : [
                {
                  "description": "Here in conjunction with orderBy we choose to ignore the first 10 most successful heroes:",
                  "code": "r.table('marvel').order_by(:success_metric).skip(10).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "limit",
          "description": "End the sequence after the given number of elements.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "limit",
              "body": "n",
              "examples" : [
                {
                  "description": "Only so many can fit in our Pantheon of heroes:",
                  "code": "r.table('marvel').orderBy(:belovedness).limit(10).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "limit",
              "body": "n",
              "examples" : [
                {
                  "description": "Only so many can fit in our Pantheon of heroes:",
                  "code": "r.table('marvel').order_by(:belovedness:).limit(10).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "limit",
              "body": "n",
              "examples" : [
                {
                  "description": "Only so many can fit in our Pantheon of heroes:",
                  "code": "r.table('marvel').order_by(:belovedness).limit(10).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "slice",
          "description": "Trim the sequence to within the bounds provided.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "slice",
              "body": "startIndex[, endIndex]",
              "examples" : [
                {
                  "description": "For this fight, we need heroes with a good mix of strength and agility:",
                  "code": "r.table('marvel').orderBy('strength').slice(5, 10).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "startIndex[, endIndex]",
              "examples" : [
                {
                  "description": "For this fight, we need heroes with a good mix of strength and agility:",
                  "code": "r.table('marvel').order_by('strength')[5:10].run(conn)"
                }
              ]
            },
            "rb": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "startindex[, endindex]",
              "examples" : [
                {
                  "description": "For this fight, we need heroes with a good mix of strength and agility:",
                  "code": "r.table('marvel').order_by(:strength)[5..10].run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "nth",
          "description": "Get the nth element of a sequence.",
          "parent": "sequence",
          "returns": "json",
          "langs": {
            "js": {
              "name": "nth",
              "body": "index",
              "examples" : [
                {
                  "description": "Select the second element in the array:",
                  "code": "r.expr([1,2,3]).nth(1).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "index",
              "examples" : [
                {
                  "description": "Select the second element in the array:",
                  "code": "r.expr([1,2,3])[1].run(conn)"
                }
              ]
            },
            "rb": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "index",
              "examples" : [
                {
                  "description": "Select the second element in the array:",
                  "code": "r([1,2,3])[1].run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "union",
          "description": "Concatenate two sequences.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "union",
              "body": "other",
              "examples" : [
                {
                  "description": "Construct a stream of all heroes:",
                  "code": "r.table('marvel').union(r.table('dc')).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "union",
              "body": "other",
              "examples" : [
                {
                  "description": "Construct a stream of all heroes:",
                  "code": "r.table('marvel').union(r.table('dc')).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "union",
              "body": "other",
              "examples" : [
                {
                  "description": "Construct a stream of all heroes:",
                  "code": "r.table('marvel').union(r.table('dc')).run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "aggregation",
      "name": "Aggregation",
      "description": "These commands are used to compute smaller values from large sequences",
      "commands": [
        {
          "tag": "reduce",
          "description": "Produce a single value from a sequence through repeated application of a reduction function.",
          "parent": "sequence",
          "returns": "json",
          "langs": {
            "js": {
              "name": "reduce",
              "body": "reductionFunction[, base]",
              "examples" : [
                {
                  "description": "How many enemies have our heroes defeated?",
                  "code": "r.table('marvel').map(r.row('monstersKilled')).reduce(function(acc, val) {\n return acc.add(val)\n}, 0).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "reduce",
              "body": "reduction_function[, base]",
              "examples" : [
                {
                  "description": "How many enemies have our heroes defeated?",
                  "code": "r.table('marvel').map(r.row[:monsters_killed])\n .reduce(lambda acc, val: acc + val, 0).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "reduce",
              "body": "[base,] reduction_function",
              "examples" : [
                {
                  "description": "How many enemies have our heroes defeated?",
                  "code": "r.table('marvel').map {|hero| hero['monstersKilled']}.reduce(0) {|acc, val|\n  acc + val\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "count",
          "description": "Count the number of elements in the sequence.",
          "parent": "sequence",
          "returns": "number",
          "langs": {
            "js": {
              "name": "count",
              "body": "",
              "examples" : [
                {
                  "description": "Just how many super heroes are there?",
                  "code": "r.table('marvel').count().add(r.table('dc').count()).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "count",
              "body": "",
              "examples" : [
                {
                  "description": "Just how many super heroes are there?",
                  "code": "(r.table('marvel').count() + r.table('dc').count()).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "count",
              "body": "",
              "examples" : [
                {
                  "description": "Just how many super heroes are there?",
                  "code": "(r.table('marvel').count + r.table('dc').count).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "distinct",
          "description": "Remove duplicate elements from the sequence.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "distinct",
              "body": "",
              "examples" : [
                {
                  "description": "Which unique villains have been vanquished by marvel heroes?",
                  "code": "r.table('marvel').concatMap(function(hero) {return hero('villainList')}).distinct()\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "distinct",
              "body": "",
              "examples" : [
                {
                  "description": "Which unique villains have been vanquished by marvel heroes?",
                  "code": "r.table('marvel').concat_map(lambda hero: hero['villainList']).distinct().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "distinct",
              "dont_need_parenthesis": true,
              "body": "",
              "examples" : [
                {
                  "description": "Which unique villains have been vanquished by marvel heroes?",
                  "code": "r.table('marvel').concat_map{|hero| hero[:villain_list]}.distinct.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "groupedmapreduce",
          "description": "Partition the sequence into groups based on the <code>grouping</code> function. The elements of each group are then mapped using the <code>mapping</code> function and reduced using the <code>reduction</code> function.<br /><br /><code>grouped_map_reduce</code> is a generalized form of <code>group by</code>.",
          "parent": "sequence",
          "returns": "json",
          "langs": {
            "js": {
              "name": "groupedMapReduce",
              "body": "grouping, mapping, reduction[, base]",
              "examples" : [
                {
                  "description": "It's only fair that heroes be compared against their weight class:",
                  "code": "r.table('marvel').groupedMapReduce(\n  function(hero) { return hero('weightClass')},  // grouping\n  function(hero) { return hero.pluck('name', 'strength')},  // mapping\n  function(acc, hero) {  // reduction\n    return r.branch(acc('strength').lt(hero('strength')), hero, acc)\n  },\n  {name:'none', strength:0} // reduction base\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "grouped_map_reduce",
              "body": "grouping, mapping, reduction[, base]",
              "examples" : [
                {
                  "description": "It's only fair that heroes be compared against their weight class:",
                  "code": "r.table('marvel').grouped_map_reduce(\n  lambda hero: hero['weightClass'],  # grouping\n  lambda hero: hero.pluck('name', 'strength'),  # mapping\n  lambda acc, hero: r.branch(acc['strength'] < hero['strength'], hero, acc),\n  {'name':'none', 'strength':0}  # base\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "grouped_map_reduce",
              "body": "grouping, mapping, [base, ]reduction",
              "examples" : [
                {
                  "description": "It's only fair that heroes be compared against their weight class:",
                  "code": "r.table('marvel').grouped_map_reduce(\n  lambda {|hero| hero[:weight_class]},  # grouping\n  lambda {|hero| hero.pluck(:name, :strength)},  #  mapping\n  {:name => 'none', :strength => 0},  # reduction base\n  lambda {|acc, hero| r.branch(acc[:strength] < hero[:strength], hero, acc)}\n).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "groupby",
          "description": "Groups elements by the values of the given attributes and then applies the given reduction. Though similar to grouped map reduce, groupby takes a standardized object for specifying the reduction. Can be used with a number of predefined common reductions.",
          "parent": "sequence",
          "returns": "json",
          "langs": {
            "js": {
              "name": "groupBy",
              "body": "attr1[, attr2...], reductionObject",
              "examples" : [
                {
                  "description": "Using a predefined reduction we can easily find the average strength of members of each weight class:",
                  "code": "r.table('marvel').groupBy('weightClass', r.avg('strength')).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "group_by",
              "body": "attr1[, attr2...], reduction_object",
              "examples" : [
                {
                  "description": "Using a predefined reduction we can easily find the average strength of members of each weight class:",
                  "code": "r.table('marvel').group_by('weightClass', r.avg('strength')).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "group_by",
              "body": "attr1[, attr2...], reduction_object",
              "examples" : [
                {
                  "description": "Using a predefined reduction we can easily find the average strength of members of each weight class:",
                  "code": "r.table('marvel').group_by(:weight_class, r.avg(:strength)).run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "reductions",
      "name": "Reductions",
      "description": "These standard reduction objects are to be used in conjunction with group_by",
      "commands": [
        {
          "tag": "count",
          "description": "Count the total size of the group.",
          "parent": "r",
          "returns": null,
          "langs": {
            "js": {
              "name": "count",
              "body": "",
              "dont_need_parenthesis": true,
              "examples" : [
                {
                  "description": "Just how many heroes do we have at each strength level?",
                  "code": "r.table('marvel').groupBy('strength', r.count).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "count",
              "body": "",
              "examples" : [
                {
                  "description": "Just how many heroes do we have at each strength level?",
                  "code": "r.table('marvel').group_by('strength', r.count).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "count",
              "dont_need_parenthesis": true,
              "body": "",
              "examples" : [
                {
                  "description": "Just how many heroes do we have at each strength level?",
                  "code": "r.table('marvel').group_by(:strength, r.count).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "sum",
          "description": "Compute the sum of the given field in the group.",
          "parent": "r",
          "returns": null,
          "langs": {
            "js": {
              "name": "sum",
              "body": "attr",
              "examples" : [
                {
                  "description": "How many enemies have been vanquished by heroes at each strength level?",
                  "code": "r.table('marvel').groupBy('strength', r.sum('enemiesVanquished')).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "sum",
              "body": "attr",
              "examples" : [
                {
                  "description": "How many enemies have been vanquished by heroes at each strength level?",
                  "code": "r.table('marvel').group_by('strength', r.sum('enemiesVanquished')).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "sum",
              "body": "attr",
              "examples" : [
                {
                  "description": "How many enemies have been vanquished by heroes at each strength level?",
                  "code": "r.table('marvel').group_by(:strength, r.sum(:enemies_vanquished)).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "avg",
          "description": "Compute the average value of the given attribute for the group.",
          "parent": "r",
          "returns": null,
          "langs": {
            "js": {
              "name": "avg",
              "body": "attr",
              "examples" : [
                {
                  "description": "What's the average agility of heroes at each strength level?",
                  "code": "r.table('marvel').groupBy('strength', r.avg('agility')).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "avg",
              "body": "attr",
              "examples" : [
                {
                  "description": "What's the average agility of heroes at each strength level?",
                  "code": "r.table('marvel').group_by('strength', r.avg('agility')).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "avg",
              "body": "attr",
              "examples" : [
                {
                  "description": "What's the average agility of heroes at each strength level?",
                  "code": "r.table('marvel').group_by(:strength, r.avg(:agility)).run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "jsonobject",
      "name": "Document Manipulation",
      "description": "These commands manipulate JSON objects and documents",
      "commands": [
        {
          "tag" : "row",
          "description": "Returns the currently visited document.",
          "parent": "r",
          "returns": "json",
          "langs": {
            "js": {
              "name": "row",
              "body": "",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Get all users whose age is greater than 5:",
                  "code": "r.table('users').filter(r.row('age').gt(5)).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Accessing the attribute 'child' of an embedded document:",
                  "code": "r.table('users').filter(r.row('embedded_doc')('child') > 5).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Add 1 to every element of an array:",
                  "code": "r.expr([1, 2, 3]).map(r.row.add(1)).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "For nested queries functions should be used instead of r.row:",
                  "code": "r.table('users').filter(function(doc) {\n    return doc('name').eq(r.table('prizes').get('winner'))\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "rb": false,
            "py": {
              "name": "row",
              "body": "",
              "dont_need_parenthesis": true,
              "examples": [
                {
                  "description": "Get all users whose age is greater than 5:",
                  "code": "r.table('users').filter(r.row['age'] > 5).run(conn)"
                },
                {
                  "description": "Accessing the attribute 'child' of an embedded document:",
                  "code": "r.table('users').filter(r.row['embedded_doc']['child'] > 5).run(conn)"
                },
                {
                  "description": "Add 1 to every element of an array:",
                  "code": "r.expr([1, 2, 3]).map(r.row + 1).run(conn)"
                },
                {
                  "description": "For nested queries functions should be used instead of r.row:",
                  "code": "r.table('users').filter(lambda doc: doc['name'] == r.table('prizes').get('winner'))\n .run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "pluck",
          "description": "Plucks out one or more attributes from either an object or a sequence of objects (projection).",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "pluck",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "We just need information about IronMan's reactor and not the rest of the document:",
                  "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "For the hero beauty contest we only care about certain qualities:",
                  "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "pluck",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "We just need information about IronMan's reactor and not the rest of the document:",
                  "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)"
                },
                {
                  "description": "For the hero beauty contest we only care about certain qualities:",
                  "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "pluck",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "We just need information about IronMan's reactor and not the rest of the document:",
                  "code": "r.table('marvel').get('IronMan').pluck(:reactor_state, :reactor_power).run(conn)"
                },
                {
                  "description": "For the hero beauty contest we only care about certain qualities:",
                  "code": "r.table('marvel').pluck(:beauty, :muscle_tone, :charm).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "without",
          "description": "The opposite of pluck; takes an object or a sequence of objects, and removes all attributes except for the ones specified.",
          "parent": "sequence",
          "returns": "sequence",
          "langs": {
            "js": {
              "name": "without",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests:",
                  "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Without their prized weapons, our enemies will quickly be vanquished:",
                  "code": "r.table('enemies').without('weapons').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "without",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests:",
                  "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)"
                },
                {
                  "description": "Without their prized weapons, our enemies will quickly be vanquished:",
                  "code": "r.table('enemies').without('weapons').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "without",
              "body": "attr1[, attr2...]",
              "examples" : [
                {
                  "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests:",
                  "code": "r.table('marvel').get('IronMan').without(:personal_victories_list).run(conn)"
                },
                {
                  "description": "Without their prized weapons, our enemies will quickly be vanquished:",
                  "code": "r.table('enemies').without(:weapons).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "merge",
          "description": "Merge two objects together to construct a new object with properties from both. Gives preference to attributes from other when there is a conflict.",
          "parent": "json",
          "returns": "json",
          "langs": {
            "js": {
              "name": "merge",
              "body": "other",
              "examples" : [
                {
                  "description": "Equip IronMan for battle:",
                  "code": "r.table('marvel').get('IronMan').merge(r.table('loadouts').get('alienInvasionKit'))\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "merge",
              "body": "other",
              "examples" : [
                {
                  "description": "Equip IronMan for battle:",
                  "code": "r.table('marvel').get('IronMan').merge(r.table('loadouts').get('alienInvasionKit'))\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "merge",
              "body": "other",
              "examples" : [
                {
                  "description": "Equip IronMan for battle:",
                  "code": "r.table('marvel').get('IronMan').merge(r.table('loadouts').get('alien_invasion_kit'))\n .run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "append",
          "description": "Append a value to an array.",
          "parent": "json",
          "returns": "json",
          "langs": {
            "js": {
              "name": "append",
              "body": "value",
              "examples" : [
                {
                  "description": "Retrieve Iron Man's equipment list with the addition of some new boots:",
                  "code": "r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "append",
              "body": "value",
              "examples" : [
                {
                  "description": "Retrieve Iron Man's equipment list with the addition of some new boots:",
                  "code": "r.table('marvel').get('IronMan')['equipment'].append('newBoots').run(conn)"
                }
              ]
            },
            "rb": {
              "name": "append",
              "body": "value",
              "examples" : [
                {
                  "description": "Retrieve Iron Man's equipment list with the addition of some new boots:",
                  "code": "r.table('marvel').get('IronMan')[:equipment].append('new_boots').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "getattr",
          "description": "Get a single attribute from an object.",
          "parent": "json",
          "returns": "json",
          "langs": {
            "js": {
              "name": "()",
              "is_selector": true,
              "name1": "(",
              "name2": ")",
              "body": "attr",
              "examples" : [
                {
                  "description": "What was Iron Man's first appearance in a comic?",
                  "code": "r.table('marvel').get('IronMan')('firstAppearance').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "attr",
              "examples" : [
                {
                  "description": "What was Iron Man's first appearance in a comic?",
                  "code": "r.table('marvel').get('IronMan')['firstAppearance'].run(conn)"
                }
              ]
            },
            "rb": {
              "name": "[]",
              "is_selector": true,
              "name1": "[",
              "name2": "]",
              "body": "attr",
              "examples" : [
                {
                  "description": "What was Iron Man's first appearance in a comic?",
                  "code": "r.table('marvel').get('IronMan')[:first_appearance].run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "contains",
          "description": "Test if an object has the given attribute.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "contains",
              "body": "attr",
              "examples" : [
                {
                  "description": "Which heroes are married?",
                  "code": "r.table('marvel').filter(function(hero) {return hero.contains('spouse')}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "contains",
              "body": "attr",
              "examples" : [
                {
                  "description": "Which heroes are married?",
                  "code": "r.table('marvel').filter(lambda hero: hero.contains('spouse')).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "contains",
              "body": "attr",
              "examples" : [
                {
                  "description": "Which heroes are married?",
                  "code": "r.table('marvel').filter{|hero| hero.contains(:spouse)}.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "operators",
      "name": "Math and logic",
      "description": "These commands provide basic mathematical and logical operators",
      "commands": [
        {
          "tag": "add",
          "description": "Sum two numbers or concatenate two strings.",
          "parent": "number | string",
          "returns": "number | string",
          "langs": {
            "js": {
              "name": "add",
              "body": "number | string",
              "examples" : [
                {
                  "description": "It's as easy as 2 + 2 = 4:",
                  "code": "r.expr(2).add(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Strings can be concatenated too:",
                  "code": "r.expr(\"foo\").add(\"bar\").run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }

              ]
            },
            "py": {
              "name": "+",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "It's as easy as 2 + 2 = 4:",
                  "code": "(r.expr(2) + 2).run(conn)"
                },
                {
                  "description": "Strings can be concatenated too:",
                  "code": "(r.expr(\"foo\") + \"bar\").run(conn)"
                }
              ]
            },
            "rb": {
              "name": "+",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "It's as easy as 2 + 2 = 4:",
                  "code": "(r(2) + 2).run(conn)"
                },
                {
                  "description": "Strings can be concatenated too:",
                  "code": "(r(\"foo\") + \"bar\").run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "sub",
          "description": "Subtract two numbers.",
          "parent": "number",
          "returns": "number",
          "langs": {
            "js": {
              "name": "sub",
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 - 2 = 0:",
                  "code": "r.expr(2).sub(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "-",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 - 2 = 0:",
                  "code": "(r.expr(2) - 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "-",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 - 2 = 0:",
                  "code": "(r(2) - 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "mul",
          "description": "Multiply two numbers.",
          "parent": "number",
          "returns": "number",
          "langs": {
            "js": {
              "name": "mul",
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 * 2 = 4:",
                  "code": "r.expr(2).mul(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "*",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 * 2 = 4:",
                  "code": "(r.expr(2) * 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "*",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 * 2 = 4:",
                  "code": "(r(2) * 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "div",
          "description": "Divide two numbers.",
          "parent": "number",
          "returns": "number",
          "langs": {
            "js": {
              "name": "div",
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 / 2 = 1:",
                  "code": "r.expr(2).div(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "/",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 / 2 = 1:",
                  "code": "(r.expr(2) / 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "/",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 / 2 = 1:",
                  "code": "(r(2) / 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "mod",
          "description": "Find the remainder when dividing two numbers.",
          "parent": "number",
          "returns": "number",
          "langs": {
            "js": {
              "name": "mod",
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 % 2 = 0:",
                  "code": "r.expr(2).mod(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "%",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 % 2 = 0:",
                  "code": "(r.expr(2) % 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "%",
              "is_operator": true,
              "body": "number",
              "examples" : [
                {
                  "description": "It's as easy as 2 % 2 = 0:",
                  "code": "(r(2) % 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "and",
          "description": "Compute the logical and of two values.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "and",
              "body": "other",
              "examples" : [
                {
                  "description": "True and false anded is false?",
                  "code": "r.expr(true).and(false).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "&",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "True and false anded is false?",
                  "code": "(r.expr(true) & false).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "&",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "True and false anded is false?",
                  "code": "(r(true) & false).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "or",
          "description": "Compute the logical or of two values.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "or",
              "body": "other",
              "examples" : [
                {
                  "description": "True or false ored is true?",
                  "code": "r.expr(true).or(false).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "|",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "True or false ored is false?",
                  "code": "(r.expr(true) | false).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "|",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "True and false ored is false?",
                  "code": "(r(true) | false).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "eq",
          "description": "Test if two values are equal.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "eq",
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 equal 2?",
                  "code": "r.expr(2).eq(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "==",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 equal 2?",
                  "code": "(r.expr(2) == 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "eq",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 equal 2?",
                  "code": "(r(2).eq 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "ne",
          "description": "Test if two values are not equal.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "ne",
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 not equal 2?",
                  "code": "r.expr(2).ne(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "!=",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 not equal 2?",
                  "code": "(r.expr(2) != 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "ne",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Does 2 not equal 2?",
                  "code": "(r(2).ne 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "gt",
          "description": "Test if the first value is greater than other.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "gt",
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than 2?",
                  "code": "r.expr(2).gt(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": ">",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than 2?",
                  "code": "(r.expr(2) > 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": ">",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than 2?",
                  "code": "(r(2) > 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "ge",
          "description": "Test if the first value is greater than or equal to other.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "ge",
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than or equal to 2?",
                  "code": "r.expr(2).ge(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": ">=",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than or equal to 2?",
                  "code": "(r.expr(2) >= 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": ">=",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 greater than or equal to 2?",
                  "code": "(r(2) >= 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "lt",
          "description": "Test if the first value is less than other.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "lt",
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than 2?",
                  "code": "r.expr(2).lt(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "<",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than 2?",
                  "code": "(r.expr(2) < 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "<",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than 2?",
                  "code": "(r(2) < 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "le",
          "description": "Test if the first value is less than or equal to other.",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "le",
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than or equal to 2?",
                  "code": "r.expr(2).le(2).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "<=",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than or equal to 2?",
                  "code": "(r.expr(2) <= 2).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "<=",
              "is_operator": true,
              "body": "other",
              "examples" : [
                {
                  "description": "Is 2 less than or equal to 2?",
                  "code": "(r(2) <= 2).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "not",
          "description": "Compute the logical inverse (not).",
          "parent": "json",
          "returns": "bool",
          "langs": {
            "js": {
              "name": "not",
              "body": "",
              "examples" : [
                {
                  "description": "Not true is false:",
                  "code": "r.expr(true).not().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "~",
              "is_operator": true,
              "operator_first": true,
              "body": "",
              "examples" : [
                {
                  "description": "Not true is false:",
                  "code": "(~r.expr(true)).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "not",
              "dont_need_parenthesis": true,
              "body": "",
              "examples" : [
                {
                  "description": "Not true is false:",
                  "code": "r(true).not.run(conn)"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "tag": "control",
      "name": "Control Structures",
      "description": "These commands provide basic control structures for the composition of complex queries",
      "commands": [
        {
          "tag": "do",
          "description": "Evaluate the <code>inExpr</code> in the context of one or more value bindings.",
          "parent": "r",
          "returns": "json",
          "langs": {
            "js": {
              "name": "do",
              "body": "arg, [args*, ]inExpr",
              "examples" : [
                {
                  "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings:",
                  "code": "r.do(r.table('marvel').get('IronMan'),\n     function (ironman) { return ironman('name'); }\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "do",
              "body": "arg, [args*, ]inExpr",
              "examples" : [
                {
                  "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings:",
                  "code": "r.do(r.table('marvel').get('IronMan'),\n     lambda ironman: ironman['name']).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "do",
              "body": "arg, [args*, ]inExpr",
              "examples" : [
                {
                  "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings:",
                  "code": "r.do(r.table('marvel').get('IronMan')) { |ironman| ironman[:name] }.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "branch",
          "description": "Evaluate one of two control paths based on the value of an expression.",
          "parent": "r",
          "returns": "query",
          "langs": {
            "js": {
              "name": "branch",
              "body": "test, trueBranch, falseBranch",
              "examples" : [
                {
                  "description": "Hero or Superhero?",
                  "code": "r.table('marvel').map(r.branch(r.row('victories').gt(100),\n    r.row('name').add(' is a superhero'),\n    r.row('name').add(' is a hero'))\n).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "branch",
              "body": "test, true_branch, false_branch",
              "examples" : [
                {
                  "description": "Hero or Superhero?",
                  "code": "r.table('marvel').map(r.branch(r.row['victories'] > 100,\n    r.row['name'] + ' is a superhero',\n    r.row['name'] + ' is a hero')\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "branch",
              "body": "test, true_branch, false_branch",
              "examples" : [
                {
                  "description": "Hero or Superhero?",
                  "code": "r.table('marvel').map { |row|  r.branch(row[:victories] > 100,\n    row[:name] + ' is a superhero',\n    row[:name] + ' is a hero')\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "foreach",
          "description": "Loop over a sequence, evaluating the given write query for each element.",
          "parent": "r",
          "returns": "query",
          "langs": {
            "js": {
              "name": "forEach",
              "body": "queryFunction",
              "examples" : [
                {
                  "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table:",
                  "code": "r.table('marvel').forEach(function(hero) {\n return r.table('villains').get(hero('villainDefeated')).delete()\n}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "for_each",
              "body": "query_function",
              "examples" : [
                {
                  "description": "Now that our heroes have defedated their villains, we can safely remove them from the villain table:",
                  "code": "r.table('marvel').for_each(\n    lambda hero: r.table('villains').get(hero['villainDefeated']).delete()\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "for_each",
              "body": "query_function",
              "examples" : [
                {
                  "description": "Now that our heroes have defedated their villains, we can safely remove them from the villain table:",
                  "code": "r.table('marvel').for_each {|hero|\n  r.table('villains').get(hero[:villain_defeated]).delete\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "error",
          "description": "Throw a runtime error.",
          "parent": "r",
          "returns": "query",
          "langs": {
            "js": {
              "name": "error",
              "body": "message",
              "examples" : [
                {
                  "description": "Iron Man can't possibly have lost a battle:",
                  "code": "r.table('marvel').get('IronMan').do(function(ironman) {\n return r.branch(ironman('victories').lt(ironman('battles')),\n  r.error('impossible code path'),\n  ironman\n)).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "error",
              "body": "message",
              "examples" : [
                {
                  "description": "Iron Man can't possibly have lost a battle:",
                  "code": "r.table('marvel').get('IronMan').do(\n  lambda ironman: r.branch(ironman['victories'] < ironman['battles'],\n                            r.error('impossible code path'),\n                            ironman)\n).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "error",
              "body": "message",
              "examples" : [
                {
                  "description": "Iron Man can't possibly have lost a battle:",
                  "code": "r.table('marvel').get('IronMan').do {\n  r.branch(ironman[:victories] < ironman[:battles],\n    r.error('impossible code path'),\n    ironman)\n}.run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "expr",
          "description": "Construct a RQL JSON object from a native object.",
          "parent": "r",
          "returns": "json",
          "langs": {
            "js": {
              "name": "expr",
              "body": "obj",
              "examples" : [
                {
                  "description": "Objects wrapped with expr can then be manipulated by RQL API functions:",
                  "code": "r.expr({a:'b'}).merge({b:[1,2,3]}).run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "expr",
              "body": "obj",
              "examples" : [
                {
                  "description": "Objects wrapped with expr can then be manipulated by RQL API functions:",
                  "code": "r.expr({'a':'b'}).merge({'b':[1,2,3]}).run(conn)"
                }
              ]
            },
            "rb": {
              "name": "expr",
              "body": "obj",
              "examples" : [
                {
                  "description": "Objects wrapped with expr can then be manipulated by RQL API functions:",
                  "code": "r.expr({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)"
                }, {
                  "description": "In Ruby, you can also do this with just r:",
                  "code": "r({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "js",
          "description": "Create a javascript expression.",
          "parent": "r",
          "returns": "js",
          "langs": {
            "js": {
              "name": "js",
              "body": "jsString",
              "examples" : [
                {
                  "description": "Concatenate two strings using Javascript:",
                  "code": "r.js(\"'str1' + 'str2'\").run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server:",
                  "code": "r.table('marvel').filter(r.js('(function (row) { return row.magazines > 5; })'))\n .run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "js",
              "body": "js_string",
              "examples" : [
                {
                  "description": "Concatenate two strings using Javascript:",
                  "code": "r.js(\"'str1' + 'str2'\").run(conn)"
                },
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server:",
                  "code": "r.table('users').filter(r.js('(function (row) { return row.magazines > 5; })'))\n .run(conn)"
                }
              ]
            },
            "rb": {
              "name": "js",
              "body": "jsString",
              "examples" : [
                {
                  "description": "Concatenate two strings using Javascript:",
                  "code": "r.js(\"'str1' + 'str2'\").run(conn)"
                },
                {
                  "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server:",
                  "code": "r.table('users').filter(r.js('(function (row) { return row.magazines > 5; })'))\n .run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "coerce_to",
          "description": "Converts a value of one type into another. <br /><br />You can convert: a selection, sequence, or object into an ARRAY, an array of pairs into an OBJECT, and any DATUM into a STRING.",
          "parent": "json",
          "returns": "type",
          "langs": {
            "js": {
              "name": "coerceTo",
              "body": "typename",
              "examples" : [
                {
                  "description": "Convert a table to an array:",
                  "code": "r.table('marvel').coerceTo('array').run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                },
                {
                  "description": "Convert an array of pairs into an object:",
                  "code": "r.expr([['name', 'Ironman'], ['victories': 2000]]).coerceTo('object').run(conn)"
                },
                {
                  "description": "Convert a number to a string:",
                  "code": "r.expr(1).coerceTo('string').run(conn)"
                }
              ]
            },
            "py": {
              "name": "coerce_to",
              "body": "typename",
              "examples" : [
                {
                  "description": "Convert a table to an array:",
                  "code": "r.table('marvel').coerce_to('array').run(conn)"
                },
                {
                  "description": "Convert an array of pairs into an object:",
                  "code": "r.expr([['name', 'Ironman'], ['victories': 2000]]).coerce_to('object').run(conn)"
                },
                {
                  "description": "Convert a number to a string:",
                  "code": "r.expr(1).coerce_to('string').run(conn)"
                }                
              ]
            },
            "rb": {
              "name": "coerce_to",
              "body": "typename",
              "examples" : [
                {
                  "description": "Convert a table to an array:",
                  "code": "r.table('marvel').coerce_to('array').run(conn)"
                },
                {
                  "description": "Convert an array of pairs into an object:",
                  "code": "r.expr([['name', 'Ironman'], ['victories': 2000]]).coerce_to('object').run(conn)"
                },
                {
                  "description": "Convert a number to a string:",
                  "code": "r.expr(1).coerce_to('string').run(conn)"
                }
              ]
            }
          }
        },
        {
          "tag": "type_of",
          "description": "Gets the type of a value.",
          "parent": "json",
          "returns": "string",
          "langs": {
            "js": {
              "name": "typeOf",
              "body": "value",
              "examples" : [
                {
                  "description": "Get the type of a string:",
                  "code": "r.expr(\"foo\").typeOf().run(conn)",
                  "can_try": true,
                  "dataset": "marvel"
                }
              ]
            },
            "py": {
              "name": "type_of",
              "body": "value",
              "examples" : [
                {
                  "description": "Get the type of a string:",
                  "code": "r.expr(\"foo\").type_of().run(conn)"
                }
              ]
            },
            "rb": {
              "name": "type_of",
              "body": "value",
              "examples" : [
                {
                  "description": "Get the type of a string:",
                  "code": "r(\"foo\").type_of.run(conn)"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
